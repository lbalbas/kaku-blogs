datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments  Comment[]
  blogPosts BlogPost[]
  drafts    Draft[]
}

model BlogPost {
  id       String       @id @default(cuid())
  publishedAt DateTime @default(now())
  title    String
  content  String       @db.VarChar(5000)
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]

  @@fulltext([title])
  @@fulltext([content, title])
}

model Comment {
  id               String      @id @default(cuid())
  content          String       @db.VarChar(300)
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  blogPostId       String
  blogPost         BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  parentCommentId  String?
  parentComment    Comment? @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childComments    Comment[] @relation("CommentToComment")
  createdAt        DateTime @default(now())
  
  @@index([userId])
  @@index([blogPostId])
  @@index([parentCommentId])
}

model Draft {
  id       String       @id @default(cuid())
  title    String
  content  String       @db.VarChar(5000)
  userId   String
  user     User      @relation(fields: [userId], references: [id])
}
